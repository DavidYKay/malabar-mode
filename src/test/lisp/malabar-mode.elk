;;; -*- emacs-lisp -*-
;; Copyright (c) 2009 Espen Wiborg <espenhw@grumblesmurf.org>
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
;; 02110-1301 USA.
;;

;;; Mocking
(provide 'semantic-load)
(provide 'semantic-ctxt)
(provide 'semantic-find)
(provide 'semantic-wisent)
(provide 'wisent-java)
(provide 'working)
(provide 'wisent-malabar-java-wy)

(defmacro define-mode-local-override (&rest ignore)
  nil)

(require 'malabar-mode)

(deftest "expression-kind constructor"
  (assert-eq 'constructor-call (malabar--expression-kind "new Foo()")))

(deftest "expression-kind function"
  (assert-eq 'function-call (malabar--expression-kind "getFoo()")))

(deftest "expression-kind array"
  (assert-eq 'array-reference (malabar--expression-kind "foo[0]")))

(deftest "expression-kind string"
  (assert-eq 'string-literal (malabar--expression-kind "\"foo\"")))

(deftest "expression-kind variable"
  (assert-eq 'variable (malabar--expression-kind "foo")))

(deftest "expression-kind this"
  (assert-eq 'this-reference (malabar--expression-kind "this")))

(deftest "expression-kind super"
  (assert-eq 'super-reference (malabar--expression-kind "super")))

(deftest "expression-kind numberliteral"
  (assert-eq 'unknown (malabar--expression-kind "42")))

(deftest "expression-components simple"
  (assert-equal '(("this" . this-reference))
                (malabar--expression-components "this")))

(deftest "expression-components simple 2"
  (assert-equal '(("getFoo()" . function-call))
                (malabar--expression-components "getFoo()")))

(deftest "expression-components compound 1"
  (assert-equal '(("this" . this-reference)
                  ("getFoo()" . function-call))
                (malabar--expression-components "this.getFoo()")))

(deftest "expression-components compound 2"
  (assert-equal '(("getFoo()" . function-call)
                  ("getBar()" . function-call))
                (malabar--expression-components "getFoo().getBar()")))

(deftest "expression-components compound 3"
  (assert-equal '(("getFoo(getBaz().getZot())" . function-call)
                  ("getBar()" . function-call))
                (malabar--expression-components "getFoo(getBaz().getZot()).getBar()")))
